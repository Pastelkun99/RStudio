# 인터랙터에 필요한 plotly패키지를 설치하고 로딩하자.
install.packages("plotly")
library(plotly)
library(ggplot2)
# ggplot로 만든 ggplotly()에 매개변수로 주면 인터랙티브 그래프가 만들어진다.
p <- ggplot(data = mpg, aes(x = displ, y = hwy, col = drv)) + geom_point()
ggplotly(p)
# diamonds 데이터는 ggplot2에 내장된 데이터이며, 다이아몬드 5만여개의 캐럿, 커팅방식, 가격 등의 속성을 담음
diamonds
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar()
ggplotly(p)
# 인터랙티브 시계열 그래프 만들기위해서 dygraph패키지를 설치하고 로딩하자.
install.packages("dygraphs")
library(dygraphs)
library(xts)
# 데이터는 내장 데이터셋인 economics를 이용하자.
economics
# dygraphs패키지를 이용해 인터랙티브 시계열 그래프를 만들려면 데이터가 시간 순서속성을 지니는
# xts(extensible time-series)데이터 타입으로 되어 있어야 한다.
eco <- xts(economics$unemploy, order.by = economics$date)
head(eco)
# dygraph()를 이용하여 인터랙티브 그래프를 만들자
# 선위에 마우스 커서를 올리면 그래프 오른쪽 위에 날짜와 실업자 수가 표시된다.
# 역시 마우스 드래그하면 특정기간만 확대할 수 있고, 더블클릭하면 원래대로 돌아온다.
dygraph(eco)
# dyRangeSelector()를 파이프 연산해서 추가하면, 그래프 아래에 날짜 범위 선택 기능이 추가된다.
# 버튼을 움직여 특정 기간만 선택할 수 있고, 범위를 정한 뒤 좌우로 움직이면
# 시간에 따라 데이터가 어떻게 변하는지 알 수 있다.
library(dplyr)
dygraph(eco) %>%
dyRangeSelector()
# ggplot로 만든 ggplotly()에 매개변수로 주면 인터랙티브 그래프가 만들어진다.
p <- ggplot(data = mpg, aes(x = displ, y = hwy, col = drv)) + geom_point()
ggplotly(p)
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar(position = "dodge")
ggplotly(p)
# dygraphs패키지를 이용해 인터랙티브 시계열 그래프를 만들려면 데이터가 시간 순서속성을 지니는
# xts(extensible time-series)데이터 타입으로 되어 있어야 한다.
eco <- xts(economics$unemploy, order.by = economics$date)
# dygraph()를 이용하여 인터랙티브 그래프를 만들자
# 선위에 마우스 커서를 올리면 그래프 오른쪽 위에 날짜와 실업자 수가 표시된다.
# 역시 마우스 드래그하면 특정기간만 확대할 수 있고, 더블클릭하면 원래대로 돌아온다.
dygraph(eco)
dygraph(eco) %>%
dyRangeSelector()
# 저축률
eco_a <- xts(economics$psavert, order.by = economics$date)
eco_b <- xts(economics$unemploy/1000, order.by = economics$date)
# 위에서 만든 두 xts타입의 두 변수를 cbind()를 이용하여 합치자.
eco2 <- cbind(eco_a, eco_b)
# eco2는 xts타입이므로 rename를 적용 못하니 colnames()를 통해 변수명을 알아보기 쉽게 바꾸도록 하자.
colnames(eco2) <- c("psavert", "unemploy")
# 그래프 그리기
dygraph(eco2) %>%
dyRangeSelector()
library(plotly)
library(ggplot2)
library(dygraphs)
library(xts)
# dyRangeSelector()를 파이프 연산해서 추가하면, 그래프 아래에 날짜 범위 선택 기능이 추가된다.
# 버튼을 움직여 특정 기간만 선택할 수 있고, 범위를 정한 뒤 좌우로 움직이면
# 시간에 따라 데이터가 어떻게 변하는지 알 수 있다.
library(dplyr)
p
ggplotly(p)
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar(position = "dodge")
ggplotly(p)
View(eco2)
class(eco2)
View(eco2)
head(eco2)
dygraph(eco2) %>%
dyRangeSelector()
library(plotly)
library(ggplot2)
library(dygraphs)
library(xts)
# dyRangeSelector()를 파이프 연산해서 추가하면, 그래프 아래에 날짜 범위 선택 기능이 추가된다.
# 버튼을 움직여 특정 기간만 선택할 수 있고, 범위를 정한 뒤 좌우로 움직이면
# 시간에 따라 데이터가 어떻게 변하는지 알 수 있다.
library(dplyr)
View(eco2)
# 그래프 그리기
dygraph(eco2) %>%
dyRangeSelector()
